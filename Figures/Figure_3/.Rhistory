# ALE plot
#-------------------------------
#library(ALEPlot)
#imp_rank_df<- wilcox_res %>%
#  dplyr::group_by(dataset) %>%  filter(rf_imps_rank<=32)
#summary(wilcox_res$rf_imps_rank)
#
#feature_imps_rank_list<-lapply(rf_clf_res$feature_imps_list, function(x)
#  with(x, data.frame(x, rf_imps_rank=rank(-rf_imps, na.last = "keep") ) ) )
#out_df_list<-list()
#for(n in 1:length(rf_clf_res$x_list)){
#  feature_imps_rank_n<-feature_imps_rank_list[[n]][,"rf_imps_rank"]
#  rf_model_n<-rf_clf_res$rf_model_list[[n]]
#  x_n<-rf_clf_res$x_list[[n]]
#  dataset_n<-rf_clf_res$datasets[[n]]
#  N=64
#  #pdf(paste(outpath,"dataset_", n,"_top_n_feature_ALEPlot.pdf",sep=""), width=40, height=20)
#  #par(mfrow = c(4,8))
#  ale_out_n<-list()
#  out_n<-matrix(NA, ncol=7, nrow=N)
#  colnames(out_n)<-c("Feature_rank", "Sparsity", "Prevalence", "N", "K", "Corr", "P_value")
#  yhat <- function(X.model, newdata) predict(X.model, newdata)
#  for(i in 1:N){
#    FeatureIdx<-which(feature_imps_rank_n==i)
#    FeatureID<-names(FeatureIdx)
#    out<-ALEPlot(x_n, rf_model_n, pred.fun = yhat, J=FeatureIdx, K=10000)
#    ale_out_n[[i]]<-data.frame(FeatureID, out)
#    out_corr<-cor.test(out[[2]], out[[3]], method="spearman")
#    out_n[i,1]<-feature_imps_rank_n[FeatureIdx]
#    out_n[i,2]<-sum(x_n[,FeatureIdx]==0)/nrow(x_n)
#    out_n[i,3]<-sum(x_n[,FeatureIdx]!=0)/nrow(x_n)
#    out_n[i,4]<-sum(x_n[,FeatureIdx]!=0)
#    out_n[i,5]<-out$K
#    out_n[i,6]<-out_corr$estimate
#    out_n[i,7]<-out_corr$p.value
#  }
#  #names(ale_list)<-names(feature_imps_rank_n)[which(feature_imps_rank_n<=N)]
#  ale_out_n<-do.call(rbind, ale_out_n)
#  p<-ggplot(ale_out_n, aes(x=x.values, y=f.values))+geom_point(alpha=0.5) + geom_line()+
#    geom_rug() + facet_wrap(~FeatureID, scales="free") + theme_bw()
#  ggsave(filename=paste(outpath,"dataset_",n,"_top_n_feature_ALEPlot.pdf",sep=""),plot=p, width=20, height=20)
#  #dev.off()
#  out_df_list[[n]]<-out_df_n<-data.frame(Dataset=rep(dataset_n, N), FeatureID=names(sort(feature_imps_rank_n[which(feature_imps_rank_n<=N)])), out_n)
#}
#
#
#ale_out_df<-reshape::merge_all(ale_out_df_list)
#ale_out_df
#sink(paste(outpath,"RF_ALEPlot_summ.xls",sep=""));write.table(ale_out_df,quote=FALSE,sep="\t", row.names = F);sink()
#-------------------------------
## fold change
#-------------------------------
#---pheatmap: Occurence rate heatmap of all  biomarkers
OccRate_dataset_df<-acast(wilcox_res_spcf_sig, Taxon~dataset, value.var="OccRate_all", fun.aggregate = mean)
pheatmap(OccRate_dataset_df, cluster_cols = F, filename = paste(outpath,"Taxa_OccRate_all_VS_dataset_",p.adj.method,"_",c_category, "_by_", s_category,".pdf",sep=""), width = 20)
# pheatmap(OccRate_dataset_df, cluster_cols = F, filename = paste(outpath,"Taxa_OccRate_all_VS_dataset_",p.adj.method,"_",c_category, "_by_", s_category,".pdf",sep=""))
## pheatmap: heatmap in mean log2 fold change of markers across datasets
logfc_dataset_df<-acast(wilcox_res_spcf_sig, Taxon~dataset, value.var="mean_logfc", fun.aggregate = mean)
head(logfc_dataset_df)
pheatmap(logfc_dataset_df, cluster_cols = F, filename = paste(outpath,"Taxa_mean_logfc_VS_dataset_",p.adj.method,"_",c_category, "_by_", s_category,".pdf",sep=""), width = 20)
# pheatmap(logfc_dataset_df, cluster_cols = F, filename = paste(outpath,"Taxa_mean_logfc_VS_dataset_",p.adj.method,"_",c_category, "_by_", s_category,".pdf",sep=""))
#---ggplot2: heatmap in mean log2 fold change of markers across datasets
feature_logfc_dataset_df<-acast(wilcox_res_spcf_sig, feature~dataset, value.var="mean_logfc")
ord <- hclust(dist(feature_logfc_dataset_df))$order
mean_logfc_m<-wilcox_res_spcf_sig[, c("dataset", "feature", "Taxon", "IfSig", "Enr", "mean_logfc")]
#-------------------------------barchart
p_logfc<-ggplot(mean_logfc_m, aes(x=Taxon, y=mean_logfc, fill=Enr)) + scale_fill_manual(values = my3cols) +
geom_bar(stat="identity", alpha=.5) + ylab("mean log2(fold change)")+
coord_flip()+ # if want to filp coordinate
theme_bw()+
facet_wrap(~ dataset, nrow=1)+
theme(axis.line = element_line(color="black"),
strip.background = element_rect(colour = "white"),
panel.border = element_blank(),
axis.text.x=element_text(angle=90, hjust=1))
ggsave(filename=paste(outpath,"Markers_logfc_",p.adj.method,"_",c_category, "_by_", s_category,".barplot.pdf",sep=""),plot=p_logfc, width=18, height=h)
#-------------------------------geom_tile
mean_logfc_m[which(mean_logfc_m$IfSig=="NotSig"), "mean_logfc"]<-NA
mean_logfc_m$feature<-factor(mean_logfc_m$feature,levels=rownames(feature_logfc_dataset_df)[ord], ordered=TRUE)
#-------------------------------
p<-ggplot(mean_logfc_m, aes(dataset, feature) ) +
geom_tile(data=mean_logfc_m, na.rm = FALSE, aes(fill = -mean_logfc), colour = 'black') + # adding "-" can switch the coloring
scale_y_discrete(label=mean_logfc_m$Taxon[ord])+
#scale_fill_continuous(type = "viridis", na.value = 'salmon')+
#coord_flip()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
scale_fill_gradient2(high ="#f46d43", mid="white", low= "steelblue", na.value = NA)
ggsave(filename=paste(outpath,"Markers_mean_logfc_VS_dataset_",p.adj.method,"_",c_category, "_by_", s_category,".heatmap.ggplot.pdf",sep=""),plot=p, width=18, height=h)
#-------------------------------
# AUROC
#-------------------------------
l_m<-melt(wilcox_res_spcf_sig[, c("feature", "Taxon","dataset","AUROC", "IfSigEnr", "Enr")])
p_auc<-ggplot(l_m, aes(x=Taxon, y=value, color=Enr)) + ylim(0.5, 1) + ylab("AUROC")+ scale_color_manual(values = my3cols) +
geom_abline(slope=0, intercept=0.5,  col = "black", lty=2) +
geom_point(aes(colour=Enr), shape="diamond", size=4) +
coord_flip()+ # if want to filp coordinate
theme_bw()+
facet_wrap(~ dataset, nrow=1)+
theme(axis.line = element_line(color="black"),
strip.background = element_rect(colour = "white"),
panel.border = element_blank(),
axis.text.x=element_text(angle=90, hjust=1))
ggsave(filename=paste(outpath,"Markers_AUROC_sig_",p.adj.method, ".", c_category, "_by_", s_category,".scatterplot.pdf",sep=""),plot=p_auc,width=18,height=h)
#-------------------------------
# -log10(q values)
#-------------------------------
l_m<-melt(wilcox_res_spcf_sig[, c("feature", "Taxon","dataset","non.param.test_p.adj", "IfSigEnr", "Enr")])
p_q<-ggplot(l_m, aes(x=Taxon, y=-log10(value), fill=Enr)) + scale_fill_manual(values = my3cols) +
geom_bar(stat="identity", alpha=.5) + ylab("-log10(q-value) (Wilcoxon.test)")+
coord_flip()+ # if want to filp coordinate
theme_bw()+
facet_wrap(~ dataset, nrow=1)+
theme(axis.line = element_line(color="black"),
strip.background = element_rect(colour = "white"),
panel.border = element_blank(),
axis.text.x=element_text(angle=90, hjust=1))
ggsave(filename=paste(outpath,"Markers_Wilcoxon.test_p.adj_",p.adj.method,"_",c_category, "_by_", s_category,".barplot.pdf",sep=""),plot=p_q, width=18, height=h)
#-------------------------------
# OccRate
#-------------------------------
OccRateCols<-colnames(wilcox_res_spcf_sig)[grep("^(?=.*OccRate)(?!.*all)", colnames(wilcox_res_spcf_sig), perl=TRUE)]
l_m<-melt(wilcox_res_spcf_sig[, c("feature", "Taxon", "dataset", OccRateCols, "IfSigEnr", "Enr")])
tmp<-do.call(rbind, strsplit(as.character(l_m[, "variable"]), "__")); colnames(tmp)<-c("OccRate", c_category)
l_m_OccRate<-data.frame(tmp, l_m)
p_occ<-ggplot(l_m_OccRate, aes(x=Taxon, y=value, fill=get(c_category))) +
geom_bar(position=position_dodge(), stat="identity", alpha=.5) +
ylab("Occurrence rate")+ #scale_fill_manual(values = my3cols[2:3]) +
coord_flip()+ # if want to filp coordinate
theme_bw()+
facet_grid( ~ dataset, scales="free")+
theme(axis.line = element_line(color="black"),
strip.background = element_rect(colour = "white"),
panel.border = element_blank(),
axis.text.x=element_text(angle=90, hjust=1))
ggsave(filename=paste(outpath,"OccRate_sig_",p.adj.method, ".",c_category, "_by_", s_category,".pdf",sep=""), plot=p_occ, width=18, height=h)
#-------------------------------
# Combined plots: require(cowplot)
#-------------------------------
p_logfc_ <- p_logfc + theme(legend.position="none")
p_auc_ <- p_auc + theme(axis.text.y =element_blank(), axis.title.y = element_blank())+ theme(legend.position="none")
p_occ_ <- p_occ + theme(axis.text.y =element_blank(), axis.title.y = element_blank())+ theme(legend.position="none")
p_q <- p_q + theme(axis.text.y =element_blank(), axis.title.y = element_blank())
combined_plot=plot_grid(p_logfc_, p_auc_, p_occ_, p_q, nrow=1, rel_widths = c(5, 2, 2, 2.5), labels="AUTO")
combined_plot
ggsave(filename=paste(outpath,"Stats_combined_plot.pdf", sep=""), plot=combined_plot, width=25, height = 6)
#-------------------------------
# Mean +/- sd abundance
#-------------------------------
# Mean abundance
meanCols<-colnames(wilcox_res_spcf_sig)[grep("^(?=.*mean)(?!.*all)(?!.*logfc)", colnames(wilcox_res_spcf_sig), perl=TRUE)]
l_m<-melt(wilcox_res_spcf_sig[, c("feature", "Taxon", "dataset", meanCols, "IfSigEnr", "Enr")])
tmp<-do.call(rbind, strsplit(as.character(l_m[, "variable"]), "__")); colnames(tmp)<-c("MeanAbd", c_category)
l_m_MeanAbd<-data.frame(tmp, l_m)
# sd
sdCols<-colnames(wilcox_res_spcf_sig)[grep("^(?=.*sd)(?!.*all)(?!.*logfc)", colnames(wilcox_res_spcf_sig), perl=TRUE)]
l_m<-melt(wilcox_res_spcf_sig[, c("feature", "Taxon", "dataset", sdCols, "IfSigEnr", "Enr")])
tmp<-do.call(rbind, strsplit(as.character(l_m[, "variable"]), "__")); colnames(tmp)<-c("sd", c_category)
l_m_sd<-data.frame(tmp, l_m)
# Mean +/- sd abundance
l_m_MeanAbd_sd<-data.frame(l_m_MeanAbd[, -ncol(l_m_MeanAbd)+1 : -ncol(l_m_MeanAbd)], mean=l_m_MeanAbd$value, sd=l_m_sd$value)
p_mean_sd<-ggplot(l_m_MeanAbd_sd, aes(x=Taxon, y=mean, group=get(c_category), fill=Enr)) +
geom_bar(position=position_dodge(), stat="identity", alpha=.5) + scale_fill_manual(values = my3cols) +
ylab("Relative abundance")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2, position=position_dodge(.9)) +
coord_flip()+ # if want to filp coordinate
theme_bw()+
facet_grid( ~ dataset, scales="free")
ggsave(filename=paste(outpath,"MeanAbd_sig_",p.adj.method, ".",c_category, "_by_", s_category,".pdf",sep=""),plot=p_mean_sd, width=18, height=h)
#-------------------------------
# rf.cross.datasets
#-------------------------------
# "rf.cross.datasets" runs standard random forests with oob estimation for classification of
# c_category in each the sub-datasets splited by the s_category,
# and apply the model to all the other datasets. The output includes
# accuracy, auc and Kappa statistics.
# perf_summ<-rf.cross.datasets(df_k, metadata_k, s_category, c_category, nfolds=10, verbose=FALSE, ntree=5000)
crossRF_res<-rf_clf.cross_appl(rf_clf_res$rf_model_list, rf_clf_res$x_list, rf_clf_res$y_list, positive_class="Caries")
perf_summ<-crossRF_res$perf_summ
p<-ggplot(perf_summ, aes(x=Validation_type, y=AUROC, color=Test_data)) +
geom_point(aes(shape=Validation_type), size=3, alpha=0.4) +
facet_grid(~Train_data)+
#geom_line(aes(x=Validation_type, y=AUROC, color=Train_data, group=Train_data))+
theme_bw()+
theme(axis.text.x= element_text(angle = 45, hjust=1))
ggsave(filename=paste(outpath,"AUROC_cross_application_",c_category, "_among_", s_category,".pdf",sep=""),plot=p, width=10, height=5)
sink(paste(outpath,"crossRF_perf_summ.xls",sep=""));write.table(perf_summ,quote=FALSE,sep="\t", row.names = F);sink()
#' The performance of cross-applications
self_validation=as.factor(perf_summ$Train_data==perf_summ$Test_data)
library(viridis)
p_AUROC<-ggplot(perf_summ, aes(x=as.factor(Test_data), y=as.factor(Train_data), z=AUROC)) +
xlab("Test data") +
ylab("Train data") +
labs(fill = "AUROC\n(ConfidentH\nVS\nCaries)") +
geom_tile(aes(fill = AUROC, color = self_validation, width=0.9, height=0.9), size=1) +
scale_color_manual(values=c("white","grey80")) +
geom_text(aes(label = round(AUROC, 2)), color = "white") +
scale_fill_viridis(limit = c(0.5, 1))+
theme_bw() + theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
strip.text = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 14),
axis.line = element_blank(),
axis.ticks = element_blank())
p_AUROC
ggsave(filename=paste(outpath,"AUROC_cross_appl_matrix_",c_category, "_among_", s_category,".heatmap.pdf",sep=""),plot=p_AUROC, width=6, height=4.6)
# Only CH and RH groups in the StatusToothPre kept for prediction
#'-------------------------------
#' Train data: filter out samples in particular groups
#'-------------------------------
data_CHRH_list<-filter_samples_by_groups_in_target_field_of_metadata(data_list$data, data_list$metadata,
target_field = c_category, negate=FALSE,
groups = c("C_H", "RelativeH"))
# data list
pred_x_list<-split(data_CHRH_list$data, data_CHRH_list$metadata[, s_category])
pred_y_list<-split(data_CHRH_list$metadata[, c_category], data_CHRH_list$metadata[, s_category])
rf_clf.pred<-function(rf_model_list, x_list, y_list, newx_list, newy_list, positive_class=NA)
{
L<-length(rf_model_list)
positive_class<-ifelse(is.na(positive_class), levels(factor(y_list[[1]]))[1], positive_class)
try(if(!identical(L, length(x_list), length(y_list))) stop("The length of x list, y list and rf model list should be identical."))
perf_summ<-data.frame(matrix(NA, ncol=17, nrow=L))
colnames(perf_summ)<-c("Train_data", "Test_data", "Validation_type", "Accuracy", "AUROC", "Kappa",
"Sensitivity", "Specificity", "Pos_Pred_Value","Neg_Pred_Value", "Precision", "Recall",
"F1", "Prevalence", "Detection_Rate", "Detection_Prevalence", "Balanced_Accuracy")
predicted<-matrix(list(), ncol=2, nrow=L)
colnames(predicted)<-c("train_predicted", "test_predicted")
for(i in 1:L){
y<-y_list[[i]]
x<-x_list[[i]]
try(if(nlevels(y)==1) stop("Less than one level in the subgroup for classification"))
#rf_model<-randomForest(x, y, ntree=5000, importance=T)
#oob<-rf.out.of.bag(x, y, nfolds=nfolds, verbose=verbose, ntree=ntree)
oob<-rf_model_list[[i]]
#---
#  RF Training accuracy
#---
cat("\nTraining dataset: ", names(x_list)[i] ,"\n\n")
conf<-caret::confusionMatrix(data=oob$predicted, oob$y, positive=positive_class)
acc<-conf$overall[1]
kappa_oob<-conf$overall[2]
cat("Accuracy in the self-validation: ", acc ,"\n")
#---
#  AUROC computation using "pROC" package
#---
auc<-get.auroc(oob$probabilities[, positive_class], oob$y, positive_class)
cat("AUROC in the self-validation: ", auc ,"\n")
perf_summ[i, 1:3]<-c(names(x_list)[i], names(x_list)[i], "self_validation")
perf_summ[i, 4:17]<-c(acc, auc, kappa_oob, conf$byClass)
#predictions
cat("Predictions: confusion matrix \n")
newx<-newx_list[[i]]
newy<-newy_list[[i]]
#pred_prob<-predict(oob$rf.model, x_list[[j]], type="prob") # for regular rf.out.of.bag (randomForest) function
# add a 0 matrix with features that are not in the rf model
if(class(oob)=="rf.cross.validation"){
model_features <- oob$rf.model[[1]]$forest$independent.variable.names
}else{
model_features <- oob$rf.model$forest$independent.variable.names
}
undected_ids <- model_features[!model_features %in% colnames(newx)]
zero_mat<-matrix(0, nrow=nrow(newx), ncol=length(undected_ids))
colnames(zero_mat) <- undected_ids
newx <- data.frame(newx, zero_mat, check.names = FALSE)
if(class(oob)=="rf.cross.validation"){
pred_prob <- get.predict.probability.from.forest(oob$rf.model[[1]], newx) # only use one of n models for prediction
pred_newy<-factor(predict(oob$rf.model[[1]], newx, type="response")$predictions)
}else{
pred_prob <- get.predict.probability.from.forest(oob$rf.model, newx) # ranger only
pred_newy<-factor(predict(oob$rf.model, newx, type="response")$predictions)
}
pred_prob<-pred_prob[, order(colnames(pred_prob))] # to avoid unanticipated order of numeric levels of factor y
# ranger only
colnames(pred_prob)<- levels(oob$y)
levels(pred_newy)<- levels(oob$y)
print(table(newy,pred_newy))
predicted[i, 1][[1]]<-data.frame(y=y, pred_y=oob$predicted, oob$probabilities); names(predicted[i, 1]) <-names(x_list)[i]
predicted[i, 2][[1]]<-data.frame(y=newy, pred_y=pred_newy, pred_prob); names(predicted[i, 2]) <-names(x_list)[i]
}
res<-list()
res$perf_summ<-perf_summ
res$predicted<-predicted
res
}
RFpred_res<-rf_clf.pred(rf_model_list=rf_clf_res$rf_model_list,
x_list=rf_clf_res$x_list,
y_list=rf_clf_res$y_list,
newx_list=pred_x_list,
newy_list=pred_y_list, positive_class="Caries")
# The predicted values and probability of prediction samples merged
pred_list<-lapply(RFpred_res$predicted[, "test_predicted"], as.data.frame)
names(pred_list)<-NULL
#pred_list<-lapply(1:length(pred_list), function(x) data.frame(dataset=rep(names(pred_list)[x], nrow(pred_list[[x]])), pred_list[[x]]))
pred_comb<-do.call(rbind, pred_list)
pred_comb<-data.frame(dataset=rep("prediction", nrow(pred_comb)), pred_comb)
pred_comb<-merge(pred_comb, data_CHRH_list$metadata, by=c(0, 0))
# The predicted values and probability of train samples merged
train_list<-lapply(RFpred_res$predicted[, "train_predicted"], as.data.frame)
names(train_list)<-NULL
train_comb<-do.call(rbind, train_list)
train_comb<-data.frame(dataset=rep("train", nrow(train_comb)), train_comb)
train_comb<-merge(train_comb, data_list$metadata, by=c(0, 0))
all_comb<-rbind(train_comb, pred_comb)
all_comb$y=factor(all_comb$y, levels=c("ConfidentH", "C_H", "RelativeH", "Caries"), ordered = TRUE)
sink(paste(outpath,"RF_pred_summ.xls",sep=""));write.table(all_comb,quote=FALSE,sep="\t", row.names = F);sink()
# Plotting
# boxplot of CC probability for all status
p <- ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
scale_colour_manual(values = viridis(4), name = "Actual status of tooth") +
# geom_signif(comparisons = list(c("ConfidentH", "RelativeH"), c("ConfidentH", "C_H"),
#                                c("RelativeH", "C_H")),
#             map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
#             test = "wilcox.test", textsize = 4, step_increase = 0.1,
#             test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE,
#                              conf.level = 0.95)) + # 添加wilcoxon test结果，并使不同分组的检验间隔0.01
ylab("MiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1))+
#geom_hline(yintercept=0.5, linetype="dashed")+
theme_bw()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 15),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 15),
legend.text = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 15),
legend.position = "none")
p
ggsave(filename=paste(outpath,"Pred_in_",c_category,".boxplot.pdf",sep=""),plot=p, width=3, height=4)
# facted by datasets (i.e. positions)
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
scale_colour_manual(values = viridis(4), name = "Actual status of tooth") +
ylab("MiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1))+
geom_hline(yintercept=0.5, linetype="dashed")+
facet_wrap(~Position2, nrow = 1)+
theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 14),
legend.position = "right")
p
ggsave(filename=paste(outpath,"Pred_in_",c_category, "_among_", s_category,".facets.boxplot.pdf",sep=""),plot=p, width=10, height=4)
# facted by Timepoint
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
scale_colour_manual(values = viridis(4), name = "Actual status of tooth") +
ylab("MiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1))+
#geom_hline(yintercept=0.5, linetype="dashed")+
facet_wrap(~Timepoint, nrow = 1)+
theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 14),
legend.position = "right")
p
ggsave(filename=paste(outpath,"Pred_in_",c_category, "_among_Timepoint.facets.boxplot.pdf",sep=""),plot=p, width=10, height=4)
# facted by StatusHostChange
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
scale_colour_manual(values = viridis(4), name = "Actual status of tooth") +
ylab("MiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1))+
geom_hline(yintercept=0.5, linetype="dashed")+
facet_wrap(~StatusHostChange, nrow = 1)+
theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 14),
legend.position = "right")
p
ggsave(filename=paste(outpath,"Pred_in_",c_category, "_among_StatusHostChange.facets.boxplot.pdf",sep=""),plot=p, width=10, height=4)
# facted by StatusToothChange
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
scale_colour_manual(values = viridis(4), name = "Actual status of tooth") +
ylab("MiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1))+
geom_hline(yintercept=0.5, linetype="dashed")+
facet_wrap(~StatusToothChange, nrow = 1)+
theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 14),
legend.position = "right")
p
ggsave(filename=paste(outpath,"Pred_in_",c_category, "_among_StatusToothChange.facets.boxplot.pdf",sep=""),plot=p, width=10, height=4)
# facted by StatusHostChange + Timepoint
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
scale_colour_manual(values = viridis(4), name = "Actual status of tooth") +
ylab("MiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1))+
geom_hline(yintercept=0.5, linetype="dashed")+
facet_grid(Timepoint~StatusHostChange)+
theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 14),
legend.position = "bottom")
p
ggsave(filename=paste(outpath,"Pred_in_",c_category, "_among_StatusHostChange_Timepoint.facets.boxplot.pdf",sep=""),plot=p, width=9, height=8)
# faceted by StatusToothChange and Timepoint
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
scale_colour_manual(values = viridis(4), name = "Actual status of tooth") +
ylab("MiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1))+
geom_hline(yintercept=0.5, linetype="dashed")+
facet_grid(Timepoint~StatusToothChange)+
theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 14),
legend.position = "bottom")
p
ggsave(filename=paste(outpath,"Pred_in_",c_category, "_among_StatusToothChange_Timepoint.facets.boxplot.pdf",sep=""),plot=p, width=9, height=8)
# load the data from the 638-member cohort
vld_data_file <- "../../../data/637/taxonomy/ML_features_table/637_taxonomy_feature_table.biom"
vld_sample_metadata <- "../../../data/637/taxonomy/637_taxonomy_metadata.tsv"
vld_feature_metadata <- "../../../data/637/taxonomy/ML_features_table/637_taxonomy_feature_taxon.txt"
#-------------------------------
# Biom table input
#-------------------------------
if(grepl("biom$", vld_data_file)){
vld_biom <- read_biom(vld_data_file)
vld_df <- data.frame(t(as.matrix(biom_data(vld_biom))), check.names = FALSE)
}else{
vld_df<-read.table(vld_data_file, header=T, row.names=1, sep="\t", quote="", comment.char = "")
}
